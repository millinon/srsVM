#ifndef REGISTER_OPCODE

#error "REGISTER_OPCODE() not defined"

#endif

#include "srsvm/word.h"

#define MK_NS(i) ((srsvm_word) ((((srsvm_word)i&0xFF)) << (WORD_SIZE-8)))

#define NS_CORE MK_NS(0)
#define NS_MOD MK_NS(1)
#define NS_MEM MK_NS(2)
#define NS_IO MK_NS(3)
#define NS_THREAD MK_NS(4)

#define MK_OPCODE(ns,id) (ns | id)

REGISTER_OPCODE(MK_OPCODE(NS_CORE,0), NOP, 0, 0);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,2), HALT, 0, 1);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,3), HALT_ERR, 1, 2);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,7), ERR_FAULT_ENABLE, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,8), ERR_FAULT_DISABLE, 1, 1);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,10), SLEEP, 1, 1);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,13), JMP, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,14), JMP_OFF, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,15), JMP_IF, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,16), JMP_OFF_IF, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,17), JMP_ERR, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,18), JMP_OFF_ERR, 2, 2);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,21), CJMP_BACK, 1, 1); 
REGISTER_OPCODE(MK_OPCODE(NS_CORE,22), CJMP_FORWARD, 1, 1); 
REGISTER_OPCODE(MK_OPCODE(NS_CORE,23), CJMP_BACK_IF, 2, 2); 
REGISTER_OPCODE(MK_OPCODE(NS_CORE,24), CJMP_FORWARD_IF, 2, 2); 
REGISTER_OPCODE(MK_OPCODE(NS_CORE,25), CJMP_BACK_ERR, 2, 2); 
REGISTER_OPCODE(MK_OPCODE(NS_CORE,26), CJMP_FORWARD_ERR, 2, 2); 

REGISTER_OPCODE(MK_OPCODE(NS_CORE,51), REG_ID, 2, 2);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,71), LOAD_CONST, 2, 3);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,100), WORD_EQ, 3, 3);

REGISTER_OPCODE(MK_OPCODE(NS_CORE,101), INCR, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_CORE,102), DECR, 1, 1);


REGISTER_OPCODE(MK_OPCODE(NS_IO,5), ARGC, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_IO,6), ARGV, 2, 2);

REGISTER_OPCODE(MK_OPCODE(NS_IO,11), PUT, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_IO,12), PUTS, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_IO,13), PUTS_ERR, 1, 1);


REGISTER_OPCODE(MK_OPCODE(NS_MEM, 0), ALLOC, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_MEM, 1), FREE, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_MEM,5), LOAD, 3, 4);
REGISTER_OPCODE(MK_OPCODE(NS_MEM,6), STORE, 3, 4);

REGISTER_OPCODE(MK_OPCODE(NS_MOD,1), MOD_ID, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_MOD,3), MOD_LOAD, 2, 2);
REGISTER_OPCODE(MK_OPCODE(NS_MOD,4), MOD_UNLOAD, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_MOD,7), MOD_OP, 2, MAX_INSTRUCTION_ARGS);
REGISTER_OPCODE(MK_OPCODE(NS_MOD,9), MOD_UNLOAD_ALL, 0, 0);

REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 0), THREAD_JOIN, 1, 2);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 1), THREAD_START, 1, 3);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 2), THREAD_EXIT, 0, 1);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 3), THREAD_ID, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 4), THREAD_ARG, 1, 1);

REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 7), MUTEX_INIT, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 8), MUTEX_DESTROY, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 11), MUTEX_LOCK, 1, 1);
REGISTER_OPCODE(MK_OPCODE(NS_THREAD, 12), MUTEX_UNLOCK, 1, 1);
